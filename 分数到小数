# 给定两个整数，分别表示分数的分子 numerator 和
# 分母 denominator，以 字符串形式返回小数 。
# 
#  如果小数部分为循环小数，则将循环的部分括在括号内。 
# 
#  如果存在多个答案，只需返回 任意一个 。 
# 
#  对于所有给定的输入，保证 答案字符串的长度小于 104 。 
# 
#  
# 
#  示例 1： 
# 
#  
# 输入：numerator = 1, denominator = 2
# 输出："0.5"
#  
# 
#  示例 2： 
# 
#  
# 输入：numerator = 2, denominator = 1
# 输出："2"
#  
# 
#  示例 3： 
# 
#  
# 输入：numerator = 2, denominator = 3
# 输出："0.(6)"
#  
# 
#  示例 4： 
# 
#  
# 输入：numerator = 4, denominator = 333
# 输出："0.(012)"
#  
# 
#  示例 5： 
# 
#  
# 输入：numerator = 1, denominator = 5
# 输出："0.2"
#
# 
#  
# 
#  提示： 
# 
#  
#  -231 <= numerator, denominator <= 231 - 1 
#  denominator != 0 
#  


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        res = []
        if numerator * denominator < 0:
            res.append('-')
        numerator, denominator = abs(numerator), abs(denominator)
        int_part = numerator // denominator
        res.append(str(int_part))
        remainder = numerator % denominator
        if not remainder:
            return ''.join(res)
        else:
            remainder = remainder * 10
            res.append('.')
        records = {}
        while True:
            int_part, left = remainder // denominator, remainder % denominator
            if remainder in records:
                circle_index = records[remainder]
                return ''.join(res[:circle_index]) + '(' + ''.join(res[circle_index:]) + ')'
            records[remainder] = len(res)
            if remainder == 0:
                return ''.join(res)
            res.append(str(int_part))
            remainder = left * 10


if __name__ == "__main__":
    r = Solution()
    rs = r.fractionToDecimal(numerator = 1, denominator = 2)
    print(rs)
# leetcode submit region end(Prohibit modification and deletion)
