# 给定平面上 n 对 互不相同 的点 points ，其中 points[i] = [xi, yi] 。回旋镖 是由点 (i, j, k) 表示的元组 ，其中
#  i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。
#
#  返回平面上所有回旋镖的数量。
#
#
#  示例 1：
#
#
# 输入：points = [[0,0],[1,0],[2,0]]
# 输出：2
# 解释：两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]
#
#
#  示例 2：
#
#
# 输入：points = [[1,1],[2,2],[3,3]]
# 输出：2
#
#
#  示例 3：
#
#
# 输入：points = [[1,1]]
# 输出：0
#
#
#
#
#  提示：
#
#
#  n == points.length
#  1 <= n <= 500
#  points[i].length == 2
#  -104 <= xi, yi <= 104
#  所有点都 互不相同


# leetcode submit region begin(Prohibit modification and deletion)
from typing import List


class Solution:
    def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        def dis(point1, point2):
            return (point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2

        result = 0
        for i in points:
            record = {}
            for j in points:
                if j != i:
                    distance = dis(i, j)
                    record[distance] = record.get(distance, 0) + 1

            for val in record.values():
                if val >= 2:
                    result += (val - 1) * val
        return result


if __name__ == "__main__":
    r = Solution()
    rs = r.numberOfBoomerangs(points = [[0,0],[1,0],[2,0]])
    print(rs)
# leetcode submit region end(Prohibit modification and deletion)
