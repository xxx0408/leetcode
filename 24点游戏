# 你有 4 张写有 1 到 9 数字的牌。你需要判断是否能通过 *，/，+，-，(，) 的运算得到 24。
#
#  示例 1:
#
#  输入: [4, 1, 8, 7]
# 输出: True
# 解释: (8-4) * (7-1) = 24
#
#
#  示例 2:
#
#  输入: [1, 2, 1, 2]
# 输出: False
#
#
#  注意:
#
#
#  除法运算符 / 表示实数除法，而不是整数除法。例如 4 / (1 - 2/3) = 12 。
#  每个运算符对两个数进行运算。特别是我们不能用 - 作为一元运算符。例如，[1, 1, 1, 1] 作为输入时，表达式 -1 - 1 - 1 - 1 是不允
# 许的。
#  你不能将数字连接在一起。例如，输入为 [1, 2, 1, 2] 时，不能写成 12 + 12 。


# leetcode submit region begin(Prohibit modification and deletion)
from typing import List


class Solution:
    def judgePoint24(self, nums: List[int]) -> bool:
        def helper(nums):
            if not nums:
                return False
            if len(nums) == 1:
                return abs(nums[0] - 24) < 0.000001

            for i in range(len(nums)):
                for j in range(len(nums)):
                    if i == j:
                        continue  # 标记结果是否为24
                    status = False

                    x = nums[i]
                    y = nums[j]
                    new_nums = [nums[k] for k in range(len(nums)) if (k != i and k != j)]

                    if i < j:
                        status = status or helper(new_nums + [x + y])
                        status = status or helper(new_nums + [x * y])
                        status = status or helper(new_nums + [x - y])
                        # 除法
                        if abs(y) > 0.000001:
                            status = status or helper(new_nums + [x / y])

                        if status:
                            return True
            return False

        return helper(nums)


if __name__ == "__main__":
    r = Solution()
    rs = r.judgePoint24([4, 1, 8, 7])
    print(rs)

# leetcode submit region end(Prohibit modification and deletion)

